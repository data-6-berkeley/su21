{
  "0": {
    "id": "0",
    "title": "Enrollment",
    "content": "Enrollment ✅ Last updated January 1, 2021 For the pilot offering of Data 94, we’re specifically targeting students who: Are undergraduates who be interested in data science Have never programmed before Do not have time conflicts with the class In order to prevent overqualified students (i.e. students with any programming experience) from taking the course, there is an application process for enrolling. As of now, all seats in the class are full. However, we are maintaining a small waitlist; as of writing, if you apply to take the course there’s a good chance you will be able to enroll. After you apply, you will hear back from us within 72 hours, letting you know that you’re on the waitlist or (possibly) able to enroll immediately. If eventually a seat opens up for you, you will receive a permission code from us that you can enter on CalCentral to enroll. The class is restricted to undergraduates only. Since one of its goals is to encourage students to take courses like Data 8 afterwards, we are capping the number of seniors (defined as someone graduating anytime in 2021) in the class to 8. We especially encourage first-year and second-year students to apply. If you fit the above criteria and are interested in the course, please fill out the application linked below. Please direct any questions to Suraj (rampure@berkeley.edu). Apply to take the course!",
    "url": "http://localhost:4000/su21/enrollment/",
    "relUrl": "/enrollment/"
  },
  "1": {
    "id": "1",
    "title": "Homework 9",
    "content": "Homework 9 – Create a Website Data 94, Spring 2021 This homework is due on Thursday, April 29th, 2021. Submission instructions for this assignment are a little different (nothing is uploaded to Gradescope); read the instructions carefully. Overview In this final homework of the semester, you will create a public-facing website with text and visualizations that you will create on your own, using a dataset that you will choose on your own. You’ll be able to share this website link with anyone you want, and you will submit the assignment by posting your website link on Ed (in this thread) for the rest of the class to see. As you can see, we aren’t distributing this assignment to you in the form of a Jupyter notebook. Instead, we’re providing you with all of the instructions here. Don’t worry – even though this assignment looks quite different than those prior, we’ve designed it to be relatively straightforward and not that time-consuming. We promise you’ll enjoy it! 🎉 Here’s a brief summary of each part of the assignment, along with a time estimate. Finding a dataset and creating a visualization (1-2 hours). Creating a GitHub account and publishing a blank website (~15 minutes). Copying your content to your website (~30 minutes). Submitting your work (~10 minutes). (Optional) Adding more content. Grading Throughout this tutorial, we will show you screenshots from an example website that we built. The links to this website and the corresponding repo (the term “repo” will be explained later on) are below. You cannot use this dataset. Website link: https://bigbilly23.github.io/2024-polls/ GitHub repo: https://github.com/bigbilly23/2024-polls Here are links to the website and GitHub repo created in Lecture 34. You cannot use this dataset either. Website link: https://bigbilly23.github.io/weather-chicago-sd/ GitHub repo: https://github.com/bigbilly23/weather-chicago-sd Part 1 – Finding a Dataset and Creating a Visualization 🎨 Note: We estimated that this part may take slightly longer than the others because it may take a while to find a dataset that you’re interested in and can make interesting visualizations with. You should not spend 1-2 hours writing code in this part. Find a dataset you want to work with in the CSV format and download it to your computer. Slides 13 and 14 of Lecture 33 list several potential sources. Try your best not to overlap datasets with others in the class, though if this happens by coincidence that’s fine. Don’t use a dataset we’ve already used this semester in this class and don’t use the dataset in the example we linked above (2024 elections polls). You may want to find more than one dataset in the event you aren’t able to make any interesting visualizations using your first choice. Don’t seek datasets with latitudes and longitudes, since unfortunately the instructions we’ll provide today will only work “regular” visualizations, not maps. Follow the steps in Slides 16-18 of Lecture 33 to create a new notebook with the necessary import statements and upload your dataset to your DataHub. Using Table.read_table, load in your dataset and save it to a variable. You should now be good to go to perform any analysis you want. Get familiarized with the data. There are no concrete steps here; the work you do here will depend on your data. For example, you may want to group to see the distribution of a particular column, or draw a scatter plot to understand the relationship between two numerical columns. We’re not grading you on this step, it’s more just for you to understand the data you’ve chosen. Create at least one of the following types of visualizations using your data. Feel free to create more than one (perhaps once you’ve finished the whole assignment), but only one is needed for full credit on the assignment. Don’t forget to give your visualizations appropriate axes labels and titles (you may lose points if you don’t). This is especially important here since your visualization will be standing alone on a website without code surrounding it. Grouped bar chart. Overlaid histogram. Scatter plot with labels or sizes or colors for each point. Line plot with multiple lines. No maps. In a Markdown cell in your notebook, write a sentence or two describing your dataset and where you found it (include a link to the website where you downloaded the CSV from). Write another short paragraph about the parts of the data you chose to visualize and any observations you made from the visualization(s) you created. We’re not looking for essays; don’t write more than ~120 words total across the two paragraphs. To include links in Markdown, use this syntax: [text to display](URL). So for example, [this goes to Google](http://google.com) becomes this goes to Google. At this point, your notebook may look something like this example here. Scroll to the very bottom to see some example paragraphs. Great! Now you have the information you need for your website. The hard part is done. Part 2 – Creating a GitHub Account and a Blank Website 💻 Create a GitHub account (go to the site and click “Sign Up” in the top right). Your username is up to you, but it may be a good idea to choose something professional since you might use this account in the future for something else. Your website URL will contain your username. After entering your credentials, it may ask you questions like “What kind of work do you do, mainly?”. You can skip these; scroll all the way to the bottom and continue. You’ll then need to verify your email address. Create a new repository. It may prompt you to do this after verifying your email; if it doesn’t, you can click the circular cat logo in the top left of your screen and then click the green button in the left pane. A repository, or repo for short, is like a folder for a project. You will need to select a name for the repository. Name it something related to the dataset that you visualized in the previous part, since your repo name will end up in the URL of your website. Don’t name it “94-homework” or something like that. Make sure to select Public and Add a README file. Overall, your settings should look like this (but with a different username and repo name): Enable GitHub Pages for your repo. GitHub Pages is the feature we will use to create our website. Follow these steps: From this page (the main page of your repo), click “Settings”. Click “Pages” in the menu on the left (it should be towards the bottom). Under “Source”, change “None” to “main”. Click “Save”. Under “Theme Chooser”, click “Choose a theme”. It will allow you to choose one of several themes; pick the one you like the most and click “Select theme”. If you end up not liking your choice, you can always come back to this menu and change the theme, so don’t worry. Note: If you are brought to a page that has you try and edit your file (it may say something like “Edit new file”), just click “Cancel”. After you follow these steps, your site will be public. You will be shown its URL; it will be in the form &lt;your github username&gt;.github.io/&lt;your repo name&gt;. Keep a tab open with your website while working on the rest of the assignment. Part 3 – Building Your Website 🔨 Navigate back to the main page for your repo by clicking its name in the top-left of your screen. It should now look something like this, though the file README.md might not have very much in it. The README.md file is where you’ll put all of the content for your website (.md denotes Markdown, the format we discussed at the start of the semester). To edit README.md (both now and moving forward), you’ll need to click the pencil icon. (In the screenshot above, it’s right under the “4 minutes ago” text.) You should be brought to an interface that allows you to edit README.md. Under the hood, GitHub Pages uses a library called Jekyll to convert your README.md to the standard HTML file format. There’s another file in your repo, called _config.yml – it serves to tell GitHub Pages which theme you chose (amongst other information). You will not edit it in this assignment. Delete everything currently in README.md and enter the text that you’d like to put on your website. Specifically: Put a heading at the top of the file (using #) that relates to your visualization and write your name on the second line. Copy the two paragraphs you wrote in Part 1 to the file. Write TODO: Put visualization here where you’d like to insert your visualization. There’s a good chance that this goes between the two paragraphs above, but it doesn’t have to. This is the bare minimum required, but you can add other text/placeholders to your site too, if there are other things you want to write about or other visualizations you want to show. (In Part 5, you’ll see how to add other types of content to your site.) Tip: To space things out vertically, put &lt;br&gt; on a new line on its own. (This is the equivalent of hitting enter several times in a Word doc.) At this point, the text in README.md might look something like this: Scroll down to the bottom of the page, and click “Commit changes”. You can think of committing as saving your changes. You can add a commit message if you’d like, saying something like “added text to website”. (This is generally good practice.) After committing, open your website once again. The changes may take a few minutes to propagate but they will eventually appear. Here’s what our example site looks like; we chose the Cayman theme so your site may look different (and that’s fine). Now your website is close, but it’s missing the pizzazz – your visualization! Here’s how you’ll get your visualization from your notebook to your website. Go back to your notebook that you created in Part 1. Assign your visualization to a variable name and add the argument show = False (just like in Homework 7 and 8). Remember, no maps allowed. In a new cell, run the following two lines. fig is a placeholder for the variable name of your visualization, so if you used a different variable name, change fig too. import plotly print(plotly.offline.plot(fig, include_plotlyjs=False, output_type=&#39;div&#39;)) Copy the output of that code (it should start with &lt;div&gt; and end with &lt;/div&gt;, and be pretty long and ugly). Go back to GitHub and edit README.md. Replace TODO: Put visualization here with the nasty looking code you just copied. Do this separately for each visualization you want to put on your website. Before the code for your first visualization, put the following code on its own on a line: &lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt; Make sure to commit your changes after (a good commit message here would be “added visualization”). At this point, your README.md might look something like this: After committing in the previous stage, refresh your website until it loads. If you’re happy with the result, congrats! All of the ugly code you copied from your notebook has been converted into your original interactive visualization. At this point, feel free to tweak things. One suggestion is to change the width and height of your image in your notebook before exporting. (You can repeat the previous step as many times as you want.) As long as you have these essentials, you can add whatever else you want to your website (see the bonus part for fun possibilities). Here’s a link to the finalized example website, without any additional pieces from Part 5. Part 4 – Submitting Your Work ✅ At this point, you’re ready to submit. There is an optional “Part 5” below that shows you how you can add additional components (like videos or Instagram posts) to your site. You’re free to submit first and then work on the optional parts, or vice versa. You also are not obligated to look at the optional part at all (but it’s fun!). Instead of submitting anything to Gradescope, you’re going to upload the notebook you created in Part 1 to GitHub too! Here’s how: Navigate back to your notebook, save, go to “Kernel &gt; Restart &amp; Run All”, and save again. Go to “File &gt; Download as &gt; Notebook (.ipynb)”. This will download your notebook to your computer. Navigate to the main page of your repo, and click “Add file” then “Upload files”. Then click “Choose your files” and select the notebook you just downloaded. After the progress bar completes, commit your changes. After these steps, your repo should look like this; here’s a link to the finalized repo for our example. In this post on Ed, post two links: the link to your website, and the link to your repo. That’s it – congrats on finishing! Make sure to take a look at others’ websites. (Optional) Part 5 – Adding More Content 🧑‍💻 Note: Nothing in this part is required or expected of you. It may interest you, however! Many of your favorite websites make it surprisingly easy to embed their content into your own website. Here, we’ll point you to some examples. Essentially these all work the same – you tell the website you want to embed their content (e.g. a tweet or an Instagram post) into your website, they give you a piece of code that does it for you, and you paste that code into your website where you want it. That’s it! Tweets. On the Twitter website, click the three dots at the top right of any tweet, then click “Embed Tweet”. A new site will appear; click “Copy Code” to copy the necessary code, and paste that code somewhere in your README.md (but not in the middle of the long visualization code). YouTube Videos. On the page of a YouTube video, click “Share”, then click “Embed”. Copy the code that appears and paste it somewhere in your README.md. You’ll notice that the code has numbers for “width” and “height”; feel free to change these. Songs. Follow these instructions for Spotify and these instructions for Apple Music. Other sites will have similar instructions. Instagram Posts. On the Instagram website, click the three dots at the top right of any post, then click “Embed” and then “Copy Embed Code”. Copy the code that appears and paste it somewhere in your README.md (beware, the code may be a little long). Here’s an example of an embedded Instagram post. If there are other sites you want to embed content from, just Google “(name of site) embed” and you’ll likely find a way to copy the necessary code from their website into your website. See here for how to add other elements to your website, like images. Grading This assignment is out of 7 points, and we expect that you will earn all 7 points. We will grade most of your work by looking at your website. Item Points Appropriate visualization that follows specifications 3 Paragraph introducting dataset and source 1 Paragraph explaining visualization 1 Attached notebook with all work shown 2 Total 7 Have fun with it, and don’t hesitate to post any questions or clarifications on Ed!",
    "url": "http://localhost:4000/su21/resources/assets/homework/hw09/",
    "relUrl": "/resources/assets/homework/hw09/"
  },
  "2": {
    "id": "2",
    "title": "Home",
    "content": "Introduction to Computational Thinking with Data 📊 UC Berkeley, Summer 2021 Instructors: Isaac Merritt (isaacmerritt@berkeley.edu), Ian Castro (castro.ian@berkeley.edu) Lecture: MW 10-11AM, TuTh 10AM-12PM, Lab: MW 11AM-12PM, Discussion: F 10AM-12PM, Office Hours: See Ed Zoom links Lecture recordings The following breakdown is tentative. All assignments are available for public consumption on our GitHub. 1. Welcome to Data 6! Jul 6 1 Introduction + Course Overview; Jupyter and Arithmetic 1 slides • lec1 code • lec1 code HTML • lec2 code • lec2 code HTML 1 optional readings: CIT 3.1, 4.1; SPR 8 Jul 7 2 Variables and Types 2 slides • QC • code • code HTML Lab 0 Using Jupyter Notebooks Jul 8 3 Comparison; Functions 3 slides • QC • lec1 code • lec1 code HTML • lec2 code • lec2 code HTML 3 optional readings: CIT 4.3, CIT 8.0, SPR 9 Homework 1 Introduction to Python (due July 12th) Survey 1 Weekly Survey (due July 12th) Jul 9 Discussion 1 Data in Education 2. Python Fundamentals Jul 12 4 Control (if/else) 4 slides • QC • code • code HTML 4 optional readings: CIT 8.0, SPR 9 Lab 1 Functions Jul 13 5 Control &amp; Functions Review; Lists and Strings 5 slides • QC • lec1 practice problems • lec2 code • lec2 code HTML 5 optional readings: CIT 9.1; SPR 12, SPR 13, SPR 11 Jul 14 6 Iteration I (For Loops) 6 slides • QC • code • code HTML 6 optional readings: SPR 19 Lab 2 Python Fundamentals Homework 2 Python Fundamentals (due July 19th) Survey 2 Weekly Survey (due July 19th) Jul 15 7 Iteration II (For Loops &amp; Algorithms); Iteration III (While Loops) 7 slides • QC • lec1 code • lec1 code HTML • lec2 code • lec2 code HTML 7 optional readings: SPR 10, 14; TCS 8.2, 10.18, Luhn’s,TCS 10.24 Jul 16 Discussion 2 Human Contexts &amp; Ethics 3. Data and Tables Jul 19 8 Quiz 1 Review 8 slides • QC • code • code HTML Lab 3 For Loops Jul 20 Quiz 1 Quiz 1 (in lecture) 9 File Formats + Dictionaries 9 slides • QC • code • code HTML 9 optional readings: CSV vs. JSON, Imports, SPR 21, TCS 12 Jul 21 10 Dictionaries and NumPy 10 slides • QC • code • code HTML 10 optional readings: SPR 21, TCS 12, CIT 5, Data 8 Python ref Lab 4 Dictionaries and NumPy Homework 3 Dictionaries and NumPy (due July 26th) Survey 3 Weekly Survey (due July 26th) Jul 22 11 Table Fundamentals; Row Manipulation 11 slides • QC • lec1 code • lec1 code HTML • lec2 code • lec2 code HTML 11 optional readings: CIT 6.0, CIT 6.1-6.4, are. docs Jul 23 Discussion 3 Algorithmic Bias 4. Table Methods Jul 26 12 Applying 12 slides • QC • code • code HTML 12 optional readings: CIT 8.1 Lab 5 Tables Jul 27 13 Grouping; Pivoting 13 slides • QC • lec1 code • lec1 code HTML • lec2 code • lec2 code HTML 13 optional readings: CIT 8.2, 8.3; Table Visualizer Jul 28 14 Joining and Row Methods 14 slides • QC • code • code HTML 14 optional readings: CIT 8.4, Join animation Lab 6 More Table Methods Homework 4 Table Methods (due August 2nd) Extra HW (Optional) Additional Homework Practice Problems Survey 4 Weekly Survey (due August 2nd) Jul 29 15 Case Study: University Rankings; Quiz 2 Review 15 case study slides • QC • code • code HTML Jul 30 Discussion 4 Data in Elections (Cambridge Analytica) 5. Data Visualization Aug 2 Quiz 2 Quiz 2 (in lecture) 16 Introduction to Visualization 16 slides • QC • code • code HTML 16 optional readings: History of Viz Aug 3 17 Visualizing Categorical &amp; Numerical Variables 17 slides • QC • lec1 code • lec1 code HTML • lec2 code • lec2 code HTML 17 optional readings: CIT 7.1, CIT 7.2* (see Slide 2) Aug 4 18 Visualizing Two Numerical Variables 18 slides • QC • code • code HTML 18 optional readings: CIT 7.0 Lab 7 Visualization Fundamentals Homework 5 Data Visualization (due August 10th) Survey 5 Weekly Survey (due August 10th) Aug 5 19 Maps; Fun with Plotly 19 slides • QC • lec1 code • lec1 code HTML • lec2 code • lec2 code HTML 19 optional readings: CIT 8.5 Aug 6 Discussion 5 Privacy (Carpenter v. US) 6. Simulations with Data + Conclusion Aug 9 20 Case Study: Perception 20 slides • QC • code code HTML 20 optional readings: Basic Principles Lab 8 More Visualization Aug 10 21 Randomness + Simulations; Finding and Using Data 21 optional readings: Randomness; CIT 9.3, 10.1 Aug 11 22 Conclusion + Next Steps 22 Lab Next Steps (no notebook) Survey 6 Final Survey (due August 14th) Aug 12 23 Final Review 23 Aug 13 Final Exam Final Exam (in lecture 10AM-12PM)",
    "url": "http://localhost:4000/su21/",
    "relUrl": "/"
  },
  "3": {
    "id": "3",
    "title": "Practice Problems by Topic",
    "content": "Practice Problems by Topic This page lists old homework and quiz problems, organized by topic in the course. This list is not necessarily comprehensive, but nevertheless we hope you find it useful. Furthermore, this page does not enumerate examples in lecture or Quick Checks; you should definitely refer to these in your studying as well. Homeworks To access blank copies of old homeworks, follow these instructions. (Repeat these instructions for each homework, we will use Homework 4 as an example.). Go to your DataHub and rename the hw04 folder to something else (say, hw04-old). Click the Homework 4 link on the course website. This will bring you to a fresh copy of Homework 4. Remember that homework solutions are all posted on Ed. The solutions for Homework X are posted in the “Homework X grades are relased!” post. Quizzes Quiz 1 solutions Quiz 2 blank copy and solutions Practice Quiz 2 solutions Quiz 3 blank copy and solutions Practice Quiz 3 solutions To access a blank copy of Quiz 1, follow the instructions above in “Homeworks”, but with the quiz01 folder. The Quiz 1 DataHub link can be found here. Quiz 1 Material Functions Homework 1: 2, 3, 4 Homework 2: All Homework 3: All Homework 4: 2, 3a, 4, 5 Homework 5: 5b Homework 6: 1f Part 1, 2b Quiz 1: All Quiz 2: 1, 2, 4.5 Practice Quiz 2: 2 Boolean Expressions and Control (If-Statements) Homework 1: 2d, 4 Homework 2: 1, 2, 3, 4b, 5 Homework 3: 1a, 1b, 2b, 3, 4 Homework 4: 2b Homework 6: 1f Part 1 Quiz 1: 1, 2, 3, 4 Quiz 2: 4.5 Practice Quiz 2: 2 Lists Homework 2: 2b, 5 Homework 3: 1b, 1d, 1e, 2c, 4 Quiz 1: 2 Quiz 2: 2.1, 2.2 Practice Quiz 2: 2 Strings and String Manipulation Homework 1: 1d, 4 Homework 2: 4 Homework 3: 2b, 3 Homework 4: 2b, Quiz 1: 4 While Loops Homework 2: 2b, 3, 5 Homework 3: 1c Quiz 1: 5 In addition, look at the extra video in Lecture 10 on Kaprekar’s constant Quiz 2 Material For Loops Homework 3: 2, 3 (see common misconceptions doc), 4 Homework 4: 2b, 3a, 4c Quiz 2: 1, 2a Practice Quiz 2: 2 Dictionaries Homework 4: 1, 2, 3 Homework 6: 1f Part 1 Homework 8: 2b Quiz 2: 1 Practice Quiz 2: 1 NumPy Arrays Arrays come up throughout the last few homeworks. Only a few problems are listed here – specifically, those that quiz you on arrays themselves. Homework 4: 4, 5 Homework 5: 3c, 5 Quiz 2: 2.2, 2.3, 3 Practice Quiz 2: 3 Table Fundamentals – num_rows, num_columns, sort, select, column, relabeled, with_columns Homework 5-8, Quiz 2-3, Practice Quiz 2-3: several examples everywhere. Tables: where Homework 5: 4, 5 Homework 6: 1c, 1e, 1g Part 1, 2a, 3b, 3d Homework 7: 2a Homework 8: 2c, 2f, 2h Quiz 2: 3.7, 4.1 Practice Quiz 2: 5.1 Quiz 3: 3.1 Practice Quiz 3: 2.4 Tables: apply Homework 6: 1f, 2b Quiz 2: 4.5 Practice Quiz 2: 4, 5 Tables: group Homework 6: 1b, 1e, 1g, 2a, 2c, 3b Homework 7: 1b, 1c Homework 8: 2a, 2c, 2f Quiz 2: 4.2, 4.3, 4.4 Practice Quiz 2: 4, 5 Quiz 3: 1.1, 3.1 Practice Quiz 3: 2.1 Tables: pivot Homework 6: 1g Part 2, 3d Homework 7: 1d, 1f Homework 8: 1a Quiz 2: 4.5 Practice Quiz 2: 4, 5.3 Quiz 3: 1.2 Tables: join Homework 6: 2c, 3c Homework 8: 2c Quiz 2: 4.4 Practice Quiz 2: 5.4 Quiz 3 Material Visualization: barh Homework 7: 1 Homework 8: 2a Quiz 3: 1 Practice Quiz 3: 2 Visualization: hist Homework 7: 2 Homework 8: 2f Quiz 3: 2 Practice Quiz 3: 1 Visualization: scatter Homework 7: 3 Homework 8: 2g, 2h Quiz 3: 3.2 Practice Quiz 3: 2.4, 2.5 Visualization: plot Homework 8: 1b, 1c Quiz 3: 3.1 Visualization: Maps Homework 8: 2d, 2e Quiz 3: 4.1 Practice Quiz 3: 3",
    "url": "http://localhost:4000/su21/resources/assets/other/practice_problems/",
    "relUrl": "/resources/assets/other/practice_problems/"
  },
  "4": {
    "id": "4",
    "title": "Resources",
    "content": "Resources 💻 There is no textbook for this course. Instead, we’re designing the lectures so that they contain everything you’ll need to know for the course. With that said, many students benefit from having textbook-style readings, so we’ve linked some in the course homepage and also include a few more resources below. Documentation In this course, you’ll become familiar with reading lots of documentation. If you’re not sure how a function works, you should type the name of the function in a cell by itself followed by ? and run the cell (so for example, Table.read_table?). This will show you that function’s documentation. Official resources for you to refer to: Python documentation datascience documentation Table documentation in particular Supplementary Readings Each of the listed online textbooks/readings will contain some material that is not in scope for our class. They all cover the fundamentals of Python, but in slightly different ways. Only the first link will contain any code that uses the datascience library that we use in this course. As a reminder, you’re not required to look at any of these; only look if you think they’ll help you. Computational and Inferential Thinking, the textbook for Data 8 at UC Berkeley, overlaps with our course significantly, though there’s a lot in there that we won’t cover and there’s a lot that we’ll cover that won’t be in there. Stanford’s Python Reference, a Python guide written for Stanford’s intro CS class, is a great reference if you need a refresher on how something works. Python Programming for Data Science and Dive Into Data Science are also good references that are written for different classes (at UBC and UCSD, respectively) that cover the material in our class and more. Composing Programs, the textbook for CS 61A and CS 88 at UC Berkeley, covers Python from a more traditional computer science perspective rather than the data science perspective we will take; as such, only a few sub-chapters are relevant to us but you may find it useful nonetheless. How to Think Like a Computer Scientist is also a great reference. Other Data 8 Python reference Throughout the semester, if you find any external resource (especially one that isn’t linked above) particularly helpful, please let us know!",
    "url": "http://localhost:4000/su21/resources/",
    "relUrl": "/resources/"
  },
  "5": {
    "id": "5",
    "title": "Staff",
    "content": "Staff 🧑‍🏫 See this post on Ed for the most up-to-date office hours schedule and Zoom links. Instructors Email the instructors with any questions about the class. {% assign instructors = site.staffers | where: ‘role’, ‘Instructor’ %} {% for staffer in instructors %} {{ staffer }} {% endfor %} Staff {% assign staff = site.staffers | where: ‘role’, ‘Staff’ %} {% for staffer in staff %} {{ staffer }} {% endfor %}",
    "url": "http://localhost:4000/su21/staff/",
    "relUrl": "/staff/"
  },
  "6": {
    "id": "6",
    "title": "Syllabus",
    "content": "Syllabus 📖 Communication 💬 Logistics 📆 About 🧐 Course Structure 🍎 Lecture Lab Discussion Homeworks Office Hours and Ed Quizzes and Exams Technology 🖥 Policies ✏️ Grading Late Policy and Extensions Academic Honesty A note on letter grades Acknowledgements 🙏 Note: This page is still being finalized, and the information here is tentative. Also, see here for information about enrollment. Communication 💬 For communication, we’ll be using Ed, a new communication tool. Ed is where you will see all announcements and get help from staff and other students on assignments and concepts. You will be added to Ed automatically; email Ian (castro.ian@berkeley.edu) or Isaac (isaacmerritt@berkeley.edu) if you’re not sure how to access it. We will not be using bCourses at all in this class; this website and Ed serve as replacements. Logistics 📆 Lecture: Mondays &amp; Wednesdays, 10-11AM; Tuesdays &amp; Thursdays, 10AM-12PM Lab: Mondays &amp; Wednesdays, 11AM-12PM Discussion: Fridays, 10AM-12PM Office Hours: TBD Lectures, labs, and office hours will be hosted on Zoom. See this post on Ed for the link. (We won’t make the Zoom link public, so that we don’t get Zoom-bombed 💣.) About 🧐 From the course catalog: This course is an introduction to computational thinking and quantitative reasoning, designed to prepare students for further coursework in data science, computer science, and statistics (in particular, Foundations of Data Science, Data C8). This course emphasizes the use of computation to gain insight about quantitative problems with real data from the social sciences. Data 6 uses the Python language to teach computation. It also uses the Jupyter Notebook environment, which makes it easy to get started with programming without needing to use a text editor and terminal and is very popular in data science applications. This class serves a different purpose than several other classes that may sound similar. Specifically: Data 8: Data 6 does not cover nearly as much statistics and inference as Data 8. Instead, it dives deeper into Python and its applications in data science. After taking this class, you will be well-equipped to take Data 8 and focus on the inference. CS 10: While CS 10 is also an introductory computing class, it focuses less on Python and data science, and more on abstract ideas in computing. It is a fantastic alternative to Data 6. CS 61A and CS 88: While these courses also teach Python, they serve a slightly different purpose - namely, they are designed to introduce students to computer science, not to computing in data science. They cover the Python language in far greater detail than we will, but they do not cover how to work with real-world data. They are also substantially more fast-paced than this course. The rough topic breakdown is as follows: Weeks 1-3: Python basics in the Jupyter notebook environment. Week 4: Working with real-world tabular data using datascience (the library used in Data 8). Week 5: Data visualization. Week 6: Probability and simulation. Special topics, as time permits. Slides and code will be posted after each lecture, and they will cover everything you are required to know for the course. There is no one textbook that covers the content of this course the way we intend on covering it, though we will link supplementary readings. Also, note that the course will emphasize the use of real-world data. Some possible datasets include Data from media markets in Pennsylvania and data on Congress members’ ages California housing prices data COVID cases Bay Area bike sharing usage data Vehicle fuel efficiency data Sports data You will leave the course being able to independently apply the skills you’ve learned to datasets of your own choosing. Course Structure 🍎 Lecture There will be four lectures a week. In lecture, we’ll introduce you to new ideas and concepts in programming and data science. Lectures will be recorded and posted after class for you to review in the future. All lecture resources (slides, code, supplemental readings) will be linked on the course website. We will begin on Berkeley Time, and attendance is mandatory. During each lecture, there will be a few points at which we stop and ask you to answer a short question. We call these questions Quick Checks. They serve two purposes: For us to get a gauge of how well the class understands the material we’re currently covering For you to get a gauge of how well you understand the material we’re currently covering Quick Checks are hosted on Ed using its “Lessons” feature, and will also be linked on the course website under each lecture. Quick Checks are graded on completion, not correctness. It’s not important to get these questions right on your first try – but it’s important to try them. You will be given time in lecture to answer them. If you have to miss a lecture for whatever reason, just answer that lecture’s Quick Check whenever you catch up on lecture. Additionally, in some lecture notebooks, we will post optional practice problems. These are not required, but we recommend that you complete them. Lab There are 2 lab sections a week that follow immediately after the Monday and Wednesday lectures. In lab, we’ll spend the first ~15 minutes going over some demos that are relevant to that week’s material. While there may be a notebook accompanying this demo (that we will post on the course website), there is no lab assignment. You’ll spend the remaining ~35 minutes working on practice problems pertinent to that week’s homework with the help of your peers and course staff. The hope is that by participating and collaborating, you will be able to better understand the concepts and finish your homework quicker. Discussion Each Friday, there will be a discussion section. In these sections, we will discuss ethical and social issues in computing and data, such as privacy and algorithmic bias. To prepare for these discussions, you will need to complete some short prep work assigned each Monday, which usually consist of a few readings. Other activities may include guest speakers and content review. Participation is a part of your grade. Following our group discussions, you will be given time to work on homework with your peers and ask questions from staff members. Sometimes, these topics may be difficult to discuss. We all come from different backgrounds and experiences, which shape our views. That being said, our classroom is a judgment-free space; we ask that everyone keep an open mind, be aware of the space you take, and make space for your peers. Homeworks You learn data science by doing data science, not by listening or reading about it. As such, homework assignments will be your primary source of learning in this class. Homeworks primarily consist of programming problems. You will apply the skills you learned in recent lectures to accomplish tasks involving real data. Autograder tests in your notebook will tell you if you’re on the right track or not. Most homeworks will also include a few “written” problems, where you have to type your answer in text. These problems will be manually graded by a human. Homeworks, like all course material, can be accessed by clicking the correct link on the course website. Clicking on the “Homework 3” link, for example, will bring you to a copy of the Homework 3 notebook in your own DataHub. This is where you will work on the assignment. Once you’re done, you will run the very last cell in the assignment to generate a .zip file, which you will then upload to Gradescope so that we can grade it. This process will be walked through in lecture and in the first assignment. There will be 5 homework assignments, which corresponds to roughly one per week. In general, homework assignments will be released on Wednesday evening, and will be due the following Monday at 11 PM. See the Policies section for our extensions and late submissions policy, as well as our homework drop policy. Homework assignments are meant to be completed individually, but we encourage you to discuss approaches with others; see our Academic Honesty policy below. Office Hours and Ed In addition to lecture and lab, we will host office hours each week. In office hours, you’ll get a chance to ask questions about and (hopefully) work with your peers on assignments. You’ll also be able to ask conceptual questions about lecture material. While office hours are not mandatory, we highly recommend attending them regularly as they’ll very likely cut down on the time you’ll need to spend on homeworks. Furthermore, you’re encouraged to ask and answer questions about assignments and concepts on Ed. Quizzes and Exams In lieu of a midterm, we will have two small quizzes, each worth 10% of your grade. Each quiz will focus on the material that was not assessed on the previous quiz. The scheduling for these is on the course homepage; the tentative dates are: Quiz 1: Tuesday, July 20 Quiz 2: Monday, August 2 We will have a final exam during the campus-assigned slot: Friday August 13th, 10AM-12PM. Unlike the quizzes, the final exam will be cumulative. More relevant logistics for quizzes and exams will be announced on Ed. Technology 🖥 We will be using several websites this semester. Here’s what they’re all used for: Course Website: where all content will be posted. Ed: discussion forum where all announcements will be sent, and where all student-staff and student-student communication will occur. Also where Quick Checks are hosted and submitted. DataHub: where all assignments will be hosted. (You will not usually have to navigate here manually; assignment links on the course homepage bring you to the right place automatically.) Gradescope: where all homeworks are submitted and all grades live. (Not bCourses! 🙅) Policies ✏️ Grading Here’s how we will compute your grade. Component Weight Notes Participation 10%   Quick Checks 5% no drops Weekly Surveys 5% no drops Homeworks 40% 5, with 1 drop (10% each) Quizzes 20% 2, 10% each Final Exam 20%   Participation In labs and discussion, you are expected to participate as part of your grade. Participation takes a variety of forms, including asking questions, working with peers on problems, volunteering answers, and completing practice problems. Even though you will not be assessed on the readings for discussion, you are also expected to complete them to be able to participate. Due to the virtual format, we will be relatively lenient for this portion of the grade. However, learning happens best when you actively participate, so please speak up in class! Weekly Surveys Given the state of our universe right now, we want to check in with you each week to hear how you’re doing, both academically and personally. Furthermore, since this is a new class, we’re very interested in receiving your feedback as to how it’s going and how we can improve. As such, we will have feedback surveys for you to fill out roughly each week. These will coincide with homework assignments, e.g. Survey 2 and Homework 2 will come out and be due at the same time. These will be hosted on Google Forms, and will be posted on both the course homepage and on Ed. They will generally not be anonymous, so that we can reach out to you if we feel the need to based on your responses. However, there will be a few points in the semester for you to provide us with anonymous feedback about the course. There are no drops for these (so you need to do them all for full credit), but we will be lenient with their deadlines. Homeworks There will be 5 homework assignments. We will drop your lowest homework assignment score, meaning your top 4 homework assignments will be graded. This means each homework is worth 10% of your overall grade in this class. There is a bonus point available for students who submit their assignments early. If you submit your homework 24 hours before the posted deadline, usually Sunday 11 PM, you will receive 1 extra credit point on your homework grade. Late Policy and Extensions Homework assignments are due to Gradescope at 11PM on the day that they are due, which will typically be Monday. We will have a small, undisclosed grace period to account for any technical difficulties; if you face any issues while submitting, please post on Ed ASAP (ideally before the deadline). If you submit your homework late, and do not have an extension (see below), we will still accept your submission but you will lose 50% of the credit you earned per day late, at a maximum of one day late. So if you scored 90% on a homework and submitted it a day late, your score would drop to a 45%. We will not accept homeworks past one day after the submission deadline. Extensions: We know this is a stressful time, and we don’t want to penalize you because of circumstances that are out of your control. To request an extension on a homework, please email both Ian and Isaac with the reason for your request and number of days you’re requesting an extension for (1 or 2). As long as your request is within reason, there’s a good chance of it being granted. Students with DSP accommodations that allow for late assignment submissions will still need to email us for extensions, but not with a reason. Academic Honesty This class does not satisfy any requirements for any program (other than that it counts towards the 120 unit minimum needed to graduate). As such, you’re not taking it to get a good grade – you’re taking it to learn! Data science is a collaborative activity. As such, we encourage you to discuss homework assignments at a high level with others, and we even give you class time to do this in lab. With that said, we ask that you write your solutions individually in your own words. Rather than copying someone else’s work, ask for help. You are not alone in this course! We’re here to help you succeed. If you invest the time to learn the material and complete the assignments, you won’t need to copy any answers (taken from 61A). If you use code you found online, please cite it in a comment. A note on letter grades The following is adapted from CSE 160 at the University of Washington. Grading for this class is not curved in the sense that the average is set at (say) a B+ and half of the class must receive a grade lower than that. If everyone does well and shows mastery of the material, everyone can receive an A (this would be awesome!). If no one does well (this is unlikely), then everyone can receive a C. Grading for this class is curved in the sense that we do not have a pre-defined mapping from homework and exam scores to a final GPA. There is no pre-determined score (e.g., 90% of all possible points) that earns an A or a B or a C or any other grade. To determine the final grade, we will ask questions like “Did this student master the material?”. Try your best not to worry about them, and we’ll reciprocate by being fair and lenient. We’re in this together 😎. Acknowledgements 🙏 This class is based on Data 94, taught by Suraj Rampure in Spring 2021 at UC Berkeley. That class was loosely based on Data C6, taught by Ian Castro in Summer 2020 at UC Berkeley, which in turn was based on Data 8R, taught by Henry Milner in Summer 2017, also at UC Berkeley. These classes were based on Data 8 at UC Berkeley. When creating Data 6, we’ve referred to the materials of several other courses: Data 8, CS 10, and CS 61A at UC Berkeley CS 106A at Stanford CSE 160 at the University of Washington The website uses Just the Class.",
    "url": "http://localhost:4000/su21/syllabus/",
    "relUrl": "/syllabus/"
  }
  
}
